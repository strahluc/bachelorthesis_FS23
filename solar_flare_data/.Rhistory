library(evir)
library(eva)
df_sf <- read.csv2("data_files/R_df_solarflare.csv", header = FALSE)
solarflare = as.numeric(as.list(df_sf$V1))
head(solarflare)
hist(solarflare, 30, col=4)
hist(solarflare, 50, col=4)
hist(solarflare, 100, col=4)
summary(solarflare)
sd(solarflare) # Standardabweichung
# Abbildung 17: QQ-Plot
qplot(solarflare,xi=0)
# Abbildung 18: Zipf-Plot
emplot(solarflare,'xy')
# Die Daten für den Zipf-Plot mit der ersten Aggregation importieren
df_zifp1 <- read.csv2("data_files/R_df_solarflare_zipf_1.csv", header = FALSE)
zipf_1 = as.numeric(as.list(df_zifp1$V1))
head(zipf_1)
# Die Daten für den Zipf-Plot mit der zweiten Aggregation importieren
df_zifp2 <- read.csv2("data_files/R_df_solarflare_zipf_2.csv", header = FALSE)
zipf_2 = as.numeric(as.list(df_zifp2$V1))
head(zipf_2)
# Die Daten für den Zipf-Plot mit der dritten Aggregation importieren
df_zifp3 <- read.csv2("data_files/R_df_solarflare_zipf_3.csv", header = FALSE)
zipf_3 = as.numeric(as.list(df_zifp3$V1))
head(zipf_3)
# Abbildung 20: zipf-Plots
par(mfrow = c(2, 2))
# 20a.) Zipf-Plot ab dem Wert 5e-06
emplot(solarflare[solarflare > 0.000005],'xy')
# 20b.) Zipf-Plot der ersten Aggregation
emplot(zipf_1,'xy')
# 20c.) Zipf-Plot der zweiten Aggregation
emplot(zipf_2,'xy')
# 20d.) Zipf-Plot der dritten Aggregation
emplot(zipf_3,'xy')
# Abbildung 23: Zipf-Plot mit Markierungen bei den Perzentilen 81, 97.6 und 99.55
emplot(solarflare,'xy')
abline(v=quantile(solarflare, c(0.81, 0.976, 0.9955)), lty=2)
# Gebe die Werte der Perzentile 81, 97.6 und 99.55 aus
quantile(solarflare, probs = c(0.81, 0.976, 0.9955))
meplot(solarflare)
abline(v=quantile(solarflare, c(0.96,0.976, 0.991)), lty=2)
# Gebe die Werte der Perzentile 96, 97.6 und 99.1 aus
quantile(solarflare, probs = c(0.96,0.976, 0.991))
library(ineq)
sort_solarflare=sort(solarflare) # Daten sortieren
n=length(solarflare)
CP=c() # Leeres Array für die Speicherung
for (i in 1:n) {
CP[i]=ineq(sort_solarflare[i:n],type="Gini") # Truncated Gini
}
plot(1:n,CP,ylim=c(0,1))
MSplot <- function(data,p=4) {
par(mfrow = c(2, 2))
x=abs(data)
for (i in 1:p) {
y=x^i
S=cumsum(y)
M=cummax(y)
R=M/S
plot(1:length(x),R,type='l', col=1, lwd=3, ylim=c(0,1),xlab='n', ylab='Rn',
main=paste("MSplot for p=",i))
}
par(mfrow = c(1, 1))
# return(R)
}
# Abbildung 21: Maximum-to-Sum Plot mit Exponenten 1-4
MSplot(solarflare)
hill(solarflare)
# Suche nach dem Schwellenwert zwischen 0.00001 und 0.0004 mit der gpdFit-Funktion (eva Package)
thresholds_1 <- seq(0.00001, 0.0004, by = 0.00001)
for (i in thresholds_1) {
print(paste0("Schwellenwert: ",i))
print(paste0("Geschätzter Parameter Xi: ",gpdFit(data=solarflare, threshold = i)$par.est[2]))
print(paste0("Standardfehler: ",gpdFit(data=solarflare, threshold = i)$par.ses[2]))
print("------------------------------")
}
fit=gpd(solarflare,0.0001)
tail(fit)
# Abbildung: 24
#   24a.) Excess Distribution (Überschussverteilung)
#   24b.) Tail of Underlying Distribution (Enden der zugrundeliegenden Verteilung)
#   24c.) Scatterplot of Residuals (Streudiagramm der Residuen)
#   24d.) QQplot of Residuals (QQ-Plot der Residuen)
par(mfrow = c(2, 2))
plot(fit, optlog = NA)
#tailplot(fit)
# Schätze die Parameter mit einem Schwellenwert von 0.0001 während und erstelle ein gpdFit Objekt mit einer Zeitperiode von 365 Tagen
z <- gpdFit(data=solarflare, threshold = 0.0001, npp =365)
gpdRl(z, period = 74.4115, method = "profile", plot = FALSE) # Schätzung des Höchstwert innerhalb von 74.4115 Jahren
gpdRl(z, period = 100, method = "profile", plot=FALSE) # Schätzung des Höchstwert innerhalb von 100 Jahren
gpdRl(z, period = 10, method = "profile", plot=FALSE) # Schätzung des Höchstwert innerhalb von 10 Jahren
# Validierungsplots
plot(z)
0
meplot(solarflare)
# Abbildung XYZ: Mean-Excess Plot
meplot(solarflare)
# Abbildung XYZ: Mean-Excess Plot
meplot(solarflare)
# Abbildung XYZ: Mean-Excess Plot
meplot(solarflare)
meplot(solarflare)
abline(v=quantile(solarflare, c(0.96,0.976, 0.991)), lty=2)
abline(v=quantile(solarflare, c(0.999,0.9999, 0.99999)), lty=2)
meplot(solarflare)
abline(v=quantile(solarflare, c(0.999,0.9999, 0.99999)), lty=2)
abline(v=quantile(solarflare, c(0.999,0.9999)), lty=2)
meplot(solarflare)
abline(v=quantile(solarflare, c(0.999,0.9999)), lty=2)
meplot(solarflare)
abline(v=quantile(solarflare, c(0.996,0.9999)), lty=2)
abline(v=quantile(solarflare, c(0.9955)), lty=2)
meplot(solarflare)
abline(v=quantile(solarflare, c(0.9955)), lty=2)
# Gebe die Werte der Perzentile 96, 97.6 und 99.1 aus
quantile(solarflare, probs = c(0.96,0.976, 0.991, 0.9955))
# Abbildung XYZ: Mean-Excess Plot
meplot(solarflare)
# Validierungsplots
plot(z)
0
library(evir)
library(eva)
df_sf <- read.csv2("data_files/R_df_solarflare.csv", header = FALSE)
solarflare = as.numeric(as.list(df_sf$V1))
head(solarflare)
hist(solarflare, 30, col=4)
hist(solarflare, 50, col=4)
hist(solarflare, 100, col=4)
summary(solarflare)
sd(solarflare) # Standardabweichung
# Abbildung 17: QQ-Plot
qplot(solarflare,xi=0)
# Abbildung 18: Zipf-Plot
emplot(solarflare,'xy')
# Die Daten für den Zipf-Plot mit der ersten Aggregation importieren
df_zifp1 <- read.csv2("data_files/R_df_solarflare_zipf_1.csv", header = FALSE)
zipf_1 = as.numeric(as.list(df_zifp1$V1))
head(zipf_1)
# Die Daten für den Zipf-Plot mit der zweiten Aggregation importieren
df_zifp2 <- read.csv2("data_files/R_df_solarflare_zipf_2.csv", header = FALSE)
zipf_2 = as.numeric(as.list(df_zifp2$V1))
head(zipf_2)
# Die Daten für den Zipf-Plot mit der dritten Aggregation importieren
df_zifp3 <- read.csv2("data_files/R_df_solarflare_zipf_3.csv", header = FALSE)
zipf_3 = as.numeric(as.list(df_zifp3$V1))
head(zipf_3)
# Abbildung 20: zipf-Plots
par(mfrow = c(2, 2))
# 20a.) Zipf-Plot ab dem Wert 5e-06
emplot(solarflare[solarflare > 0.000005],'xy')
# 20b.) Zipf-Plot der ersten Aggregation
emplot(zipf_1,'xy')
# 20c.) Zipf-Plot der zweiten Aggregation
emplot(zipf_2,'xy')
# 20d.) Zipf-Plot der dritten Aggregation
emplot(zipf_3,'xy')
# Abbildung 23: Zipf-Plot mit Markierungen bei den Perzentilen 81, 97.6 und 99.55
emplot(solarflare,'xy')
abline(v=quantile(solarflare, c(0.81, 0.976, 0.9955)), lty=2)
# Gebe die Werte der Perzentile 81, 97.6 und 99.55 aus
quantile(solarflare, probs = c(0.81, 0.976, 0.9955))
# Abbildung XYZ: Mean-Excess Plot
meplot(solarflare)
meplot(solarflare)
abline(v=quantile(solarflare, c(0.96,0.976, 0.991)), lty=2)
# Gebe die Werte der Perzentile 96, 97.6 und 99.1 aus
quantile(solarflare, probs = c(0.96,0.976, 0.991, 0.9955))
library(ineq)
sort_solarflare=sort(solarflare) # Daten sortieren
n=length(solarflare)
CP=c() # Leeres Array für die Speicherung
for (i in 1:n) {
CP[i]=ineq(sort_solarflare[i:n],type="Gini") # Truncated Gini
}
plot(1:n,CP,ylim=c(0,1))
MSplot <- function(data,p=4) {
par(mfrow = c(2, 2))
x=abs(data)
for (i in 1:p) {
y=x^i
S=cumsum(y)
M=cummax(y)
R=M/S
plot(1:length(x),R,type='l', col=1, lwd=3, ylim=c(0,1),xlab='n', ylab='Rn',
main=paste("MSplot for p=",i))
}
par(mfrow = c(1, 1))
# return(R)
}
# Abbildung 21: Maximum-to-Sum Plot mit Exponenten 1-4
MSplot(solarflare)
hill(solarflare)
# Suche nach dem Schwellenwert zwischen 0.00001 und 0.0004 mit der gpdFit-Funktion (eva Package)
thresholds_1 <- seq(0.00001, 0.0004, by = 0.00001)
for (i in thresholds_1) {
print(paste0("Schwellenwert: ",i))
print(paste0("Geschätzter Parameter Xi: ",gpdFit(data=solarflare, threshold = i)$par.est[2]))
print(paste0("Standardfehler: ",gpdFit(data=solarflare, threshold = i)$par.ses[2]))
print("------------------------------")
}
fit=gpd(solarflare,0.0001)
tail(fit)
# Abbildung: 24
#   24a.) Excess Distribution (Überschussverteilung)
#   24b.) Tail of Underlying Distribution (Enden der zugrundeliegenden Verteilung)
#   24c.) Scatterplot of Residuals (Streudiagramm der Residuen)
#   24d.) QQplot of Residuals (QQ-Plot der Residuen)
par(mfrow = c(2, 2))
plot(fit, optlog = NA)
#tailplot(fit)
# Schätze die Parameter mit einem Schwellenwert von 0.0001 während und erstelle ein gpdFit Objekt mit einer Zeitperiode von 365 Tagen
z <- gpdFit(data=solarflare, threshold = 0.0001, npp =365)
gpdRl(z, period = 74.4115, method = "profile", plot = FALSE) # Schätzung des Höchstwert innerhalb von 74.4115 Jahren
gpdRl(z, period = 100, method = "profile", plot=FALSE) # Schätzung des Höchstwert innerhalb von 100 Jahren
gpdRl(z, period = 10, method = "profile", plot=FALSE) # Schätzung des Höchstwert innerhalb von 10 Jahren
# Validierungsplots
plot(z)
plot(z)
# Validierungsplots
plot(z)
# Validierungsplots
plot(z)
par(mfrow = c(2, 2))
z <- gpdFit(data=solarflare, threshold = 0.0001, npp =365)
plot(z, optlog = NA)
siduals (QQ-Plot der Residuen)
par(mfrow = c(2, 2))
plot(fit, optlog = NA)
hist(solarflare, 2, col=4)
hist(solarflare, 1, col=4)
hist(solarflare, 30, col=4)
hist(solarflare, 50, col=4)
hist(solarflare, 100, col=4)
summary(solarflare)
sd(solarflare) # Standardabweichung
fit=gpd(solarflare,0.0001)
tail(fit)
tail(gpdFit(data=solarflare, threshold = 0.0001))
print(paste0("Geschätzter Parameter Xi: ",gpdFit(data=solarflare, threshold = i)$par.est[2]))
print(paste0("Standardfehler von xi: ",gpdFit(data=solarflare, threshold = i)$par.ses[2]))
print(paste0("Geschätzter Parameter beta: ",gpdFit(data=solarflare, threshold = i)$par.est[1]))
print(paste0("Standardfehler von beta: ",gpdFit(data=solarflare, threshold = i)$par.ses[1]))
print(paste0("Geschätzter Parameter Xi: ",gpdFit(data=solarflare, threshold = 0.0001)$par.est[2]))
print(paste0("Standardfehler von xi: ",gpdFit(data=solarflare, threshold = 0.0001)$par.ses[2]))
print(paste0("Geschätzter Parameter beta: ",gpdFit(data=solarflare, threshold = 0.0001)$par.est[1]))
print(paste0("Standardfehler von beta: ",gpdFit(data=solarflare, threshold = 0.0001)$par.ses[1]))
library(evir)
library(eva)
df_sf <- read.csv2("data_files/R_df_solarflare.csv", header = FALSE)
solarflare = as.numeric(as.list(df_sf$V1))
head(solarflare)
hist(solarflare, 30, col=4)
hist(solarflare, 50, col=4)
hist(solarflare, 100, col=4)
summary(solarflare)
sd(solarflare) # Standardabweichung
# Abbildung 17: QQ-Plot
qplot(solarflare,xi=0)
# Abbildung 18: Zipf-Plot
emplot(solarflare,'xy')
# Die Daten für den Zipf-Plot mit der ersten Aggregation importieren
df_zifp1 <- read.csv2("data_files/R_df_solarflare_zipf_1.csv", header = FALSE)
zipf_1 = as.numeric(as.list(df_zifp1$V1))
head(zipf_1)
# Die Daten für den Zipf-Plot mit der zweiten Aggregation importieren
df_zifp2 <- read.csv2("data_files/R_df_solarflare_zipf_2.csv", header = FALSE)
zipf_2 = as.numeric(as.list(df_zifp2$V1))
head(zipf_2)
# Die Daten für den Zipf-Plot mit der dritten Aggregation importieren
df_zifp3 <- read.csv2("data_files/R_df_solarflare_zipf_3.csv", header = FALSE)
zipf_3 = as.numeric(as.list(df_zifp3$V1))
head(zipf_3)
# Abbildung 20: zipf-Plots
par(mfrow = c(2, 2))
# 20a.) Zipf-Plot ab dem Wert 5e-06
emplot(solarflare[solarflare > 0.000005],'xy')
# 20b.) Zipf-Plot der ersten Aggregation
emplot(zipf_1,'xy')
# 20c.) Zipf-Plot der zweiten Aggregation
emplot(zipf_2,'xy')
# 20d.) Zipf-Plot der dritten Aggregation
emplot(zipf_3,'xy')
# Abbildung 27: Mean-Excess Plot
meplot(solarflare)
# Abbildung 26: Concentration Profile
# Quelle des Codes: https://www.youtube.com/watch?v=eUWlzAQfgFw&t=280s
library(ineq)
sort_solarflare=sort(solarflare) # Daten sortieren
n=length(solarflare)
CP=c() # Leeres Array für die Speicherung
for (i in 1:n) {
CP[i]=ineq(sort_solarflare[i:n],type="Gini") # Truncated Gini
}
plot(1:n,CP,ylim=c(0,1))
# Abbildung 22: Mean-Excess Plot mit Markierungen bei den Perzentilen 96, 97.6 und 99.1
meplot(solarflare)
abline(v=quantile(solarflare, c(0.96,0.976, 0.991)), lty=2)
# Gebe die Werte der Perzentile 96, 97.6 und 99.1 aus
quantile(solarflare, probs = c(0.96,0.976, 0.991))
# Abbildung 23: Zipf-Plot mit Markierungen bei den Perzentilen 81, 97.6 und 99.55
emplot(solarflare,'xy')
abline(v=quantile(solarflare, c(0.81, 0.976, 0.9955)), lty=2)
# Gebe die Werte der Perzentile 81, 97.6 und 99.55 aus
quantile(solarflare, probs = c(0.81, 0.976, 0.9955))
# Quelle des Codes: https://www.youtube.com/watch?v=eUWlzAQfgFw&t=280s
MSplot <- function(data,p=4) {
par(mfrow = c(2, 2))
x=abs(data)
for (i in 1:p) {
y=x^i
S=cumsum(y)
M=cummax(y)
R=M/S
plot(1:length(x),R,type='l', col=1, lwd=3, ylim=c(0,1),xlab='n', ylab='Rn',
main=paste("MSplot for p=",i))
}
par(mfrow = c(1, 1))
# return(R)
}
# Abbildung 21: Maximum-to-Sum Plot mit Exponenten 1-4
MSplot(solarflare)
# Suche nach dem Schwellenwert zwischen 0.00001 und 0.0004 mit der gpdFit-Funktion (eva Package)
thresholds_1 <- seq(0.00001, 0.0004, by = 0.00001)
for (i in thresholds_1) {
print(paste0("Schwellenwert: ",i))
print(paste0("Geschätzter Parameter Xi: ",gpdFit(data=solarflare, threshold = i)$par.est[2]))
print(paste0("Standardfehler: ",gpdFit(data=solarflare, threshold = i)$par.ses[2]))
print("------------------------------")
}
print(paste0("Geschätzter Parameter Xi: ",gpdFit(data=solarflare, threshold = 0.0001)$par.est[2]))
print(paste0("Standardfehler von xi: ",gpdFit(data=solarflare, threshold = 0.0001)$par.ses[2]))
print(paste0("Geschätzter Parameter beta: ",gpdFit(data=solarflare, threshold = 0.0001)$par.est[1]))
print(paste0("Standardfehler von beta: ",gpdFit(data=solarflare, threshold = 0.0001)$par.ses[1]))
# Schätze die Parameter mit einem Schwellenwert von 0.0001 während und erstelle ein gpdFit Objekt mit einer Zeitperiode von 365 Tagen
z <- gpdFit(data=solarflare, threshold = 0.0001, npp =365)
gpdRl(z, period = 74.4115, method = "profile", plot = FALSE) # Schätzung des Höchstwert innerhalb von 74.4115 Jahren
gpdRl(z, period = 100, method = "profile", plot=FALSE) # Schätzung des Höchstwert innerhalb von 100 Jahren
gpdRl(z, period = 10, method = "profile", plot=FALSE) # Schätzung des Höchstwert innerhalb von 10 Jahren
# Plot der geschätzten Verteilung
plot(z)
0
# Schätze die Parameter mit einem Schwellenwert von 0.0001 während und erstelle ein gpdFit Objekt mit einer Zeitperiode von 365 Tagen
z <- gpdFit(data=solarflare, threshold = 0.0001, npp =365)
gpdRl(z, period = 74.4115, method = "profile", plot = FALSE) # Schätzung des Höchstwert innerhalb von 74.4115 Jahren
gpdRl(z, period = 100, method = "profile", plot=FALSE) # Schätzung des Höchstwert innerhalb von 100 Jahren
gpdRl(z, period = 10, method = "profile", plot=FALSE) # Schätzung des Höchstwert innerhalb von 10 Jahren
# Plot der geschätzten Verteilung
plot(z)
